openapi: 3.0.0
info:
  title: Messaging Service API
  version: '1.0.0'
  description: RESTful API for managing conversations and messages

servers:
  - url: https://api.messagingservice.com/v1
    description: Production server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: "Error message description"

    Conversation:
      type: object
      properties:
        id:
          type: string
          example: "conv_123456789"
        title:
          type: string
          example: "New Conversation"
        status:
          type: string
          enum: [open, closed]
        user_id:
          type: string
          example: "usr_123456789"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        unread_count:
          type: integer
        closedAt:
          type: string
          format: date-time
          nullable: true
        archived:
          type: boolean
        archivedAt:
          type: string
          format: date-time
          nullable: true

    Message:
      type: object
      properties:
        id:
          type: string
          example: "msg_123456789"
        content:
          type: string
        contentType:
          type: string
          example: "plain_text"
        createdAt:
          type: string
          format: date-time
        participantRole:
          type: string
          enum: [CUSTOM_BOT, CUSTOMER, AGENT, SYSTEM, SUPERVISOR]
        participantName:
          type: string

    ConversationList:
      type: object
      properties:
        conversations:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Conversation'
              - type: object
                properties:
                  lastMessage:
                    $ref: '#/components/schemas/Message'
        _links:
          type: object
          properties:
            next:
              type: object
              properties:
                href:
                  type: string

    MessageList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        _links:
          type: object
          properties:
            next:
              type: object
              properties:
                href:
                  type: string

security:
  - bearerAuth: []

paths:
  /conversations:
    post:
      summary: Create a conversation
      responses:
        '201':
          description: Conversation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
    
    get:
      summary: Get conversations list
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
          description: Maximum number of conversations to return
        - name: cursor
          in: query
          schema:
            type: string
          description: Last conversation ID from previous response
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: is_archived
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConversationList'

  /conversations/{conversationId}:
    parameters:
      - name: conversationId
        in: path
        required: true
        schema:
          type: string
    
    get:
      summary: Get conversation details
      responses:
        '200':
          description: Conversation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'
    
    patch:
      summary: Update conversation details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [open, closed]
                archived:
                  type: boolean
                subject:
                  type: string
      responses:
        '200':
          description: Updated conversation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conversation'

  /conversations/{conversationId}/messages:
    parameters:
      - name: conversationId
        in: path
        required: true
        schema:
          type: string
    
    get:
      summary: Get conversation messages
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageList'
    
    post:
      summary: Send a message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '201':
          description: Message sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'